{
  "swagger": "2.0",
  "info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {},
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "host": "localhost",
  "basePath": "/",
  "tags": [
    {
      "name": "execution",
      "description": "Execution Events Controller"
    },
    {
      "name": "status",
      "description": "Status Controller"
    }
  ],
  "paths": {
    "/execution-events": {
      "post": {
        "tags": [
          "execution"
        ],
        "summary": "Save Execution Events",
        "description": "\n        Saves a list of Execution Events.\n\n        Payload format:\n\n        [\n          {\n            // Reference to the execution plan Id that was triggered\n            planId: <UUID>,\n            // Time (milliseconds since Epoch) when the execution finished\n            timestamp: <number>,\n            // [Optional] Duration (in nanoseconds) of the execution\n            duration: <number>,\n            // [Optional] Additional info about the error (in case there was an error during the execution)\n            error: {...},\n            // [Optional] Any other extra information related to the given execution event\n            extra: {...}\n          },\n          ...\n        ]\n      ",
        "operationId": "executionEventUsingPOST",
        "consumes": [
          "application/vnd.absa.spline.producer.v1.1+json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "execEvents",
            "description": "execEvents",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutionEvent"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "All execution Events are successfully stored",
            "schema": {
              "$ref": "#/definitions/BoxedUnit"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/execution-plans": {
      "post": {
        "tags": [
          "execution"
        ],
        "summary": "Save Execution Plan",
        "description": "\n        Saves an Execution Plan and returns its new UUID.\n\n        Payload format:\n\n        {\n          // [Optional] Global unique identifier of the execution plan. If omitted, will be generated by the server.\n          id: <UUID>,\n\n          // [Optional] A name of the application (script, job etc) that this execution plan represents.\n          name: <string>,\n\n          // Operation level lineage info\n          operations: {\n\n            // Write operation\n            write: {\n              // Operation ID (should be unique in the scope of the current execution plan)\n              id: <string>,\n              // [Optional] Operation name\n              name: <string>,\n              // Destination URI, where the data has been written to\n              outputSource: <URI>,\n              // Shows if the write operation appended or replaced the data in the target destination\n              append: <boolean>,\n              // Array of preceding operations IDs,\n              // i.e. operations that serves as an input for the current operation\n              childIds: [<string>],\n              // [Optional] Operation parameters\n              params: {...},\n              // [Optional] Custom info about the operation\n              extra: {...}\n            },\n\n            // Array of read operations\n            reads: [\n              {\n                // Operation ID (see above)\n                id: <string>,\n                // [Optional] Operation name\n                name: <string>,\n                // Source URIs, where the data has been read from\n                inputSources: [<URI>],\n                // [Optional] Custom info about the operation\n                params: {...},\n                // [Optional] Custom info about the operation\n                extra: {...}\n              },\n              ...\n            ],\n\n            // Other operations\n            other: [\n              {\n                // Operation ID (see above)\n                id: <string>,\n                // [Optional] Operation name\n                name: <string>,\n                // Array of preceding operations IDs (see above)\n                childIds: [<string>],\n                // [Optional] Custom info about the operation\n                params: {...},\n                // [Optional] Custom info about the operation\n                extra: {...}\n              },\n              ...\n            ]\n          },\n\n          // [Optional] Attribute definitions\n          attributes: [\n            {\n              id: <string>,\n              // Attribute name\n              name: <string>,\n              // [Optional] References to other attributes, expressions or constants that this attribute is computed from\n              childRefs: [ { __exprId: <string> } | { __attrId: <string> } ],\n              // [Optional] Custom info\n              extra: {...}\n            }\n          ],\n\n          // [Optional] Attribute level lineage info\n          expressions: {\n\n            // Function definitions\n            functions: [\n              {\n                id: <string>,\n                // Function name\n                name: <string>,\n                // [Optional] References to operands (expressions, constants or attributes)\n                childRefs: [ { __exprId: <string> } | { __attrId: <string> } ],\n                // [Optional] Named expression parameters\n                params: {...},\n                // [Optional] Custom meta info\n                extra: {...}\n              }\n            ],\n\n            // Constant/Literal definitions\n            constants: {\n              {\n                id: <string>,\n                // constant value\n                value: <any>,\n                // [Optional] Custom meta info\n                extra: {...}\n              }\n            }\n          },\n\n          // Information about the data framework in use (e.g. Spark, StreamSets etc)\n          systemInfo: {\n            name: <string>,\n            version: <string>\n          },\n\n          // [Optional] Spline agent information\n          agentInfo: {\n            name: <string>,\n            version: <string>\n          },\n\n          // [Optional] Any other extra info associated with the current execution plan\n          extraInfo: {...}\n        }\n      ",
        "operationId": "executionPlanUsingPOST",
        "consumes": [
          "application/vnd.absa.spline.producer.v1.1+json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "execPlan",
            "description": "execPlan",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecutionPlan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Execution Plan is stored with the UUID returned in a response body",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/status": {
      "head": {
        "tags": [
          "status"
        ],
        "summary": "Server health status",
        "description": "Check that producer is running and that the database is accessible and initialized",
        "operationId": "statusHeadUsingHEAD",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "Everything's working",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "There is a problem"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AttrOrExprRef": {
      "type": "object",
      "properties": {
        "__attrId": {
          "type": "string"
        },
        "__exprId": {
          "type": "string"
        }
      },
      "title": "AttrOrExprRef"
    },
    "Attribute": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "dataType": {
          "type": "object"
        },
        "childRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttrOrExprRef"
          }
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Attribute"
    },
    "BoxedUnit": {
      "type": "object",
      "title": "BoxedUnit"
    },
    "DataOperation": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "childIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "output": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "title": "DataOperation"
    },
    "ExecutionEvent": {
      "type": "object",
      "required": [
        "planId",
        "timestamp"
      ],
      "properties": {
        "planId": {
          "type": "string",
          "format": "uuid"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "durationNs": {
          "type": "object"
        },
        "error": {
          "type": "object"
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "title": "ExecutionEvent"
    },
    "ExecutionPlan": {
      "type": "object",
      "required": [
        "operations",
        "systemInfo"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "operations": {
          "$ref": "#/definitions/Operations"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "expressions": {
          "$ref": "#/definitions/Expressions"
        },
        "systemInfo": {
          "$ref": "#/definitions/NameAndVersion"
        },
        "agentInfo": {
          "$ref": "#/definitions/NameAndVersion"
        },
        "extraInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "title": "ExecutionPlan"
    },
    "Expressions": {
      "type": "object",
      "properties": {
        "functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FunctionalExpression"
          }
        },
        "constants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Literal"
          }
        }
      },
      "title": "Expressions"
    },
    "FunctionalExpression": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "dataType": {
          "type": "object"
        },
        "childRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttrOrExprRef"
          }
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "title": "FunctionalExpression"
    },
    "Literal": {
      "type": "object",
      "required": [
        "id",
        "value"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "dataType": {
          "type": "object"
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "value": {
          "type": "object"
        }
      },
      "title": "Literal"
    },
    "NameAndVersion": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "NameAndVersion"
    },
    "Operations": {
      "type": "object",
      "required": [
        "write"
      ],
      "properties": {
        "write": {
          "$ref": "#/definitions/WriteOperation"
        },
        "reads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReadOperation"
          }
        },
        "other": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataOperation"
          }
        }
      },
      "title": "Operations"
    },
    "ReadOperation": {
      "type": "object",
      "required": [
        "id",
        "inputSources"
      ],
      "properties": {
        "inputSources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "output": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "title": "ReadOperation"
    },
    "WriteOperation": {
      "type": "object",
      "required": [
        "append",
        "childIds",
        "id",
        "outputSource"
      ],
      "properties": {
        "outputSource": {
          "type": "string"
        },
        "append": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "childIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "title": "WriteOperation"
    }
  }
}
