#
# Copyright 2017 ABSA Group Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ===================================================================================================
#                      THIS FILE CONTAINS DEFAULT SPLINE SPARK AGENT PROPERTIES.
# ===================================================================================================
#
# Spline mode: DISABLED|REQUIRED|BEST_EFFORT
spline.mode=BEST_EFFORT

# The version of UUID that is used for ExecutionPlan ID
# (DON'T MODIFY UNLESS YOU UNDERSTAND THE IMPLICATIONS)
spline.internal.execPlan.uuid.version=5

# Lineage Dispatchers

# Root lineage dispatcher.
# Use one the logical dispatchers names registered below (http, kafka, console etc), or your custom dispatcher name
spline.lineageDispatcher=http

# HTTP dispatcher
spline.lineageDispatcher.http.className=za.co.absa.spline.harvester.dispatcher.HttpLineageDispatcher
# Base URL of the Spline Producer REST API endpoint
spline.lineageDispatcher.http.producer.url=

# Kafka dispatcher
spline.lineageDispatcher.kafka.className=za.co.absa.spline.harvester.dispatcher.KafkaLineageDispatcher
# producer configs as defined by kafka (bootstrap.servers, key.serializer, etc) all kafka configs are supported
spline.lineageDispatcher.kafka.producer.bootstrap.servers=
spline.lineageDispatcher.kafka.producer.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spline.lineageDispatcher.kafka.producer.value.serializer=org.apache.kafka.common.serialization.StringSerializer
spline.lineageDispatcher.kafka.producer.max.in.flight.requests.per.connection=1
# topic name for plans and events
spline.lineageDispatcher.kafka.topic=

# Console dispatcher
spline.lineageDispatcher.console.className=za.co.absa.spline.harvester.dispatcher.ConsoleLineageDispatcher
# (OUT | ERR) - whether the lineage data should be sent to standard output or standard error
spline.lineageDispatcher.console.stream=OUT

# Logging dispatcher
spline.lineageDispatcher.logging.className=za.co.absa.spline.harvester.dispatcher.LoggingLineageDispatcher
# (ERROR | WARN | INFO | DEBUG | TRACE) - the logging level on which the lineage data should be logged
spline.lineageDispatcher.logging.level=INFO

# Composite dispatcher
spline.lineageDispatcher.composite.className=za.co.absa.spline.harvester.dispatcher.CompositeLineageDispatcher
# A comma separated logical dispatcher names to which the lineage data will be delegated
spline.lineageDispatcher.composite.dispatchers=
# (true | false) - whether the dispatcher should fail fast on the first error occurred, or log it and continue
spline.lineageDispatcher.composite.failOnErrors=false

# HDFS dispatcher (experimental, tailored for specific use case, not recommended for general production usage)
spline.lineageDispatcher.hdfs.className=za.co.absa.spline.harvester.dispatcher.HDFSLineageDispatcher
# Output lineage file will be created alongside the target data file
spline.lineageDispatcher.hdfs.fileName=_LINEAGE
# the size of the buffer to be used
spline.lineageDispatcher.hdfs.fileBufferSize=4096
# file/directory permissions, provided as umask string, either in octal or symbolic format
spline.lineageDispatcher.hdfs.filePermissions=



# User Custom dispatcher (example)
# Fully specified class name implementing {LineageDispatcher} trait.
# The class must have a constructor with a single parameter of type {org.apache.commons.configuration.Configuration}
# spline.lineageDispatcher.my-dispatcher.className=org.example.spline.MyDispatcherImpl
# spline.lineageDispatcher.my-dispatcher.prop1=value1
# spline.lineageDispatcher.my-dispatcher.prop2=value2

# Strategy for dealing with writes in ignore mode that doesn't provide info whether the file was actually written
spline.IWDStrategy=default
spline.IWDStrategy.default.className=za.co.absa.spline.harvester.iwd.DefaultIgnoredWriteDetectionStrategy
# Options: CAPTURE_LINEAGE | IGNORE_LINEAGE
spline.IWDStrategy.default.onMissingMetrics=IGNORE_LINEAGE

# Root post processing lineage filter
spline.postProcessingFilter=composite

# Composite Filter
spline.postProcessingFilter.composite.className=za.co.absa.spline.harvester.postprocessing.CompositePostProcessingFilter

# A comma separated list of user lineage filters {za.co.absa.spline.harvester.postprocessing.PostProcessingFilter}
# The classes must have a constructor with a single parameter of type {org.apache.commons.configuration.Configuration}
#
# Example:
#   to enable password replacing in the data source URIs add "dsPasswordReplace" filter to the list:
#spline.postProcessingFilter.composite.filters=dsPasswordReplace
spline.postProcessingFilter.composite.filters=dsPasswordReplace

# This filter replaces password occurrences in the data source URIs
spline.postProcessingFilter.dsPasswordReplace.className=za.co.absa.spline.harvester.postprocessing.DataSourcePasswordReplacingFilter
spline.postProcessingFilter.dsPasswordReplace.replacement=*****
spline.postProcessingFilter.dsPasswordReplace.nameRegexes=\
  (?i)password ,\
  (?i)passphrase
spline.postProcessingFilter.dsPasswordReplace.valueRegexes=\
  (?i)[?&;](?:password|passphrase)=([^&;]*) ,\
  //[^:]*:([^@]*)@(?:\\w+\\.)*\\w+
